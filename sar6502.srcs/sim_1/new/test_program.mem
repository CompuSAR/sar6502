@00a9 97                                // test_program.s:19 lda_zp_test: .byte $97
@0100 7a                                // test_program.s:22 .dc $ff,$7a         ; Put stack in known state
7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a   // Array
@01ff 7a                                // test_program.s:23 .byte $7a           ; Due to a limitation of our lst parser, need to mark the end point
@0300 ea                                // test_program.s:28 nop
@0301 ea                                // test_program.s:29 nop
@0302 ea                                // test_program.s:30 nop
@0303 a9 03                             // test_program.s:31 lda #$03
@0305 20 ef 04                          // test_program.s:32 jsr flags_dump
@0308 a5 a9                             // test_program.s:33 lda lda_zp_test     ; Make sure we don't treat the operand as an opcode
@030a 20 ef 04                          // test_program.s:34 jsr flags_dump
@030d ad 21 6d                          // test_program.s:36 lda lda_abs_test
@0310 20 ef 04                          // test_program.s:37 jsr flags_dump
@0313 8d 00 02                          // test_program.s:39 sta FINISHED_TRIGGER
@04ef 08                                // test_program.s:43 php
@04f0 b0 0c                             // test_program.s:44 bcs .1
@04f2 90 0a                             // test_program.s:45 bcc .1
@04f4 70 04                             // test_program.s:47 .2  bvs .3
@04f6 50 02                             // test_program.s:48 bvc .3
@04f8 80 08                             // test_program.s:50 .4  bra .5
@04fa d0 fc                             // test_program.s:52 .3  bne .4
@04fc f0 fa                             // test_program.s:53 beq .4
@04fe 30 f4                             // test_program.s:55 .1  bmi .2
@0500 10 f2                             // test_program.s:56 bpl .2
@0502 28                                // test_program.s:59 plp
@0503 60                                // test_program.s:60 rts
@0504 a2 ff                             // test_program.s:63 ldx #$ff
@0506 9a                                // test_program.s:64 txs
@0507 a9 03                             // test_program.s:65 lda #start/256
@0509 48                                // test_program.s:66 pha
@050a a9 00                             // test_program.s:67 lda #start%256
@050c 48                                // test_program.s:68 pha
@050d a9 44                             // test_program.s:69 lda #INTMASK+OVERFLOW
@050f 48                                // test_program.s:70 pha
@0510 40                                // test_program.s:71 rti
@0511 00                                // test_program.s:75 brk
@6d21 74 00                             // test_program.s:78 lda_abs_test    .word $74
@fffa 11 05                             // test_program.s:81 nmi_vector:     .word nmi_handler
@fffc 04 05                             // test_program.s:82 reset_vector:   .word reset_handler
@fffe 11 05                             // test_program.s:83 irq_vector:     .word int_handler
