@00a9 07                                // test_program.s:19 lda_zp_test: .byte $07
@0100 7a                                // test_program.s:22 .dc $ff,$7a         ; Put stack in known state
7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a 7a   // Array
@01ff 7a                                // test_program.s:23 .byte $7a           ; Due to a limitation of our lst parser, need to mark the end point
@0300 ea                                // test_program.s:28 nop
@0301 ea                                // test_program.s:29 nop
@0302 ea                                // test_program.s:30 nop
@0303 a9 03                             // test_program.s:31 lda #$03
@0305 20 10 03                          // test_program.s:32 jsr flags_dump
@0308 a5 a9                             // test_program.s:33 lda lda_zp_test     ; Make sure we don't treat the operand as an opcode
@030a 20 10 03                          // test_program.s:34 jsr flags_dump
@030d 8d 00 02                          // test_program.s:36 sta FINISHED_TRIGGER
@0310 08                                // test_program.s:39 php
@0311 28                                // test_program.s:40 plp
@0312 60                                // test_program.s:41 rts
@0313 a2 ff                             // test_program.s:44 ldx #$ff
@0315 9a                                // test_program.s:45 txs
@0316 a9 03                             // test_program.s:46 lda #start/256
@0318 48                                // test_program.s:47 pha
@0319 a9 00                             // test_program.s:48 lda #start%256
@031b 48                                // test_program.s:49 pha
@031c a9 44                             // test_program.s:50 lda #INTMASK+OVERFLOW
@031e 48                                // test_program.s:51 pha
@031f 40                                // test_program.s:52 rti
@0320 00                                // test_program.s:56 brk
@fffa 20 03                             // test_program.s:61 nmi_vector:     .word nmi_handler
@fffc 13 03                             // test_program.s:62 reset_vector:   .word reset_handler
@fffe 20 03                             // test_program.s:63 irq_vector:     .word int_handler
